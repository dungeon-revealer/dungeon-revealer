name: Build Binaries

on:
  push:
    branches: master # Run on master or tags
    tags:
      - "v*"

defaults:
  run:
    shell: bash

jobs:
  build_x64:
    name: ${{ matrix.os }} Binaries
    runs-on: ${{ matrix.runner }}
    strategy:
      matrix:
        os: [linux, macos, windows]
        include:
          - os: linux
            runner: ubuntu-latest
            output: dungeon-revealer-linux-x64
          - os: macos
            runner: macos-latest
            output: dungeon-revealer-macos-x64
          - os: windows
            runner: windows-latest
            output: dungeon-revealer-windows.exe
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Setup node
        uses: actions/setup-node@v2
        with:
          node-version: 16

      - name: Install Dependencies
        run: |
          npm ci

      - name: Build Code
        run: |
          npm run build

      - name: Compile x64 binary
        id: compile
        run: |
          mkdir compile
          cp -r build server-build node_modules package.json package-lock.json compile/
          npx caxa -i compile -o ${{ matrix.output }} -- "{{caxa}}/node_modules/.bin/node" "{{caxa}}/server-build/index.js" "--caxa"

      - name: Upload artifacts
        uses: actions/upload-artifact@v2
        with:
          name: artifact-${{ matrix.output }}
          path: "${{ matrix.output }}"

  build_arm:
    name: Linux ${{ matrix.arch }} Binaries
    runs-on: ubuntu-latest
    strategy:
      matrix:
        arch: [armv7, arm64]
        include:
          - arch: armv7
            docker_platform: linux/arm/v7
            docker_image: arm32v7/node:16
            output: dungeon-revealer-linux-armv7
          - arch: arm64
            docker_platform: linux/arm64/v8
            docker_image: arm64v8/node:16
            output: dungeon-revealer-linux-arm64
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up QEMU
        id: qemu
        uses: docker/setup-qemu-action@v1
        with:
          platforms: ${{ matrix.docker_platform }}

      - name: Available platforms
        run: echo ${{ steps.qemu.outputs.platforms }}

      - name: Enable Docker Experimental Features
        run: |
          echo $'{\n  "experimental": true\n}' | sudo tee /etc/docker/daemon.json
          mkdir -p ~/.docker
          echo $'{\n  "experimental": "enabled"\n}' | sudo tee ~/.docker/config.json
          sudo service docker restart
          docker version -f '{{.Client.Experimental}}'
          docker version -f '{{.Server.Experimental}}'

      - name: Build ${{ matrix.arch }}
        run: |
          CMD='cp -r /caxa /caxa2 && cd /caxa2 && echo "unsafe-perm = true" > .npmrc && npm ci && npm run build && mkdir compile && cp -r build server-build node_modules package.json package-lock.json compile/ && npx caxa -i compile -o /caxa/${{ matrix.output }} -- "{{caxa}}/node_modules/.bin/node" "{{caxa}}/server-build/index.js" "--caxa"'
          docker run --rm --platform ${{ matrix.docker_platform }} -v $PWD:/caxa ${{ matrix.docker_image }} sh -c "$CMD"

      - name: Upload artifacts
        uses: actions/upload-artifact@v2
        with:
          name: artifact-${{ matrix.output }}
          path: ${{ matrix.output }}

  package:
    name: Package and Release
    needs: [build_x64, build_arm]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Get branch names
        id: branch-name
        uses: tj-actions/branch-names@v4.9

      - name: "Set environment: Branch"
        if: steps.branch-name.outputs.is_tag == 'false'
        run: |
          echo "version_string=${{ steps.branch-name.outputs.current_branch }}-${GITHUB_SHA::6}" >> $GITHUB_ENV

      - name: "Set environment: Tags"
        if: steps.branch-name.outputs.is_tag == 'true'
        run: |
          echo "version_string=${{ steps.branch-name.outputs.tag }}" >> $GITHUB_ENV

      - name: Download Artifacts
        uses: actions/download-artifact@v2
        with:
          path: bin/

      - name: File Checksums
        run: |
          cd bin
          rm -rf dungeon-revealer || true                         # remove unnecessary script
          find . -type f -exec mv {} ./ \;                        # move files from subdirectories to top directory
          find . -type d -not -path "." -exec rmdir {} +          # remove empty subdirectories
          find . -type f -not -path "*.exe" -exec chmod +x {} +   # make linux & macos files executable
          shasum -a 256 * | tee -a checksums.txt                  # show file checksums

      - name: Zip Archives
        run: |
          cd bin
          for f in $(find . -type f -name "dungeon*");            # package each executable in a zip file
          do
            zip -j "${f%.exe}-${{ env.version_string }}.zip" "$f" ../LICENSE ../README.md checksums.txt;
          done

      - name: Upload Zip Artifact
        uses: actions/upload-artifact@v2
        with:
          name: dungeon-revealer-zips-${{ env.version_string }}
          path: "bin/*.zip"

      - name: Release
        uses: softprops/action-gh-release@v1
        if: steps.branch-name.outputs.is_tag == 'true'
        with:
          name: Release ${{ env.version_string }}
          draft: true
          files: |
            bin/*.zip
            bin/checksums.txt
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: "Set environment for discord"
        if: success() && steps.branch-name.outputs.is_tag == 'false'
        run: |
          # Template json to send as an embed
          # jq replaces $var with `jq --arg var <value> "$TEMPLATE"`
          TEMPLATE='[{"title": $title, "url": $url, "color": $color, "description": $desc}]'

          # Grab the list of commits from event.json
          COMMITS=$(cat $GITHUB_EVENT_PATH | jq -c '.commits')

          # Iterate through each commit and create the formatted string:
          # [`<commit_sha_short>`](<commit_url>) <commit_message>\n <other_commits>
          DESC=''
          for row in $(echo "${COMMITS}" | jq -r '.[] | @base64'); do
              _jq() {
               echo ${row} | base64 --decode | jq -r ${1}
              }
             DESC=$DESC$(printf "[%s](%s) %s" $'`'"$(_jq '.id' | cut -c -7)"$'`' "$(_jq '.url')" "$(_jq '.message')")$'\n'
          done

          # Check if description is longer than the character limit
          if [ ${#DESC} -gt 2048 ]; then
            DESC=$(echo $DESC | cut -c -2045)"..."
          fi
          echo "$DESC"
          echo "DISCORD_EMBEDS=$(jq -nc --arg title "[${{ github.event.repository.name }}:${GITHUB_REF##*/}] binary build" --arg url "${{ github.event.repository.html_url }}/actions/runs/${{ github.run_id }}" --arg color "16750848" --arg desc "$DESC" "$TEMPLATE")" >> $GITHUB_ENV

      - name: Discord notification
        if: success() && steps.branch-name.outputs.is_tag == 'false'
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK_UPDATES }}
        uses: Ilshidur/action-discord@0.3.2
